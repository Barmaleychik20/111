import telebot
from telebot import types
import config
from datetime import datetime
import time
from tinydb import TinyDB, Query

bot = telebot.TeleBot(config.TOKEN)
db = TinyDB('stars.json')
users = db.table('users')
promocodes = db.table('promocodes')
channels = db.table('channels')
requests = db.table('requests')
meta = db.table('meta')
tasks = db.table('tasks')
completed_tasks = db.table('completed_tasks')

start_time = time.time()
if not meta.get(doc_id=1):
    meta.insert({'request_counter': 0})
request_counter = meta.get(doc_id=1)['request_counter']

def check_subscription(user_id):
    if not channels.all():
        return True
    for channel in channels.all():
        try:
            status = bot.get_chat_member(channel['id'], user_id).status
            if status not in ['member', 'administrator', 'creator']:
                return False
        except:
            return False
    return True

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üë§ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
    btn2 = types.KeyboardButton("üçÄ –ü—Ä–æ–º–æ–∫–æ–¥—ã")
    btn3 = types.KeyboardButton("üè¶ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    btn4 = types.KeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    return markup

def generate_task_message(user_id, page=0):
    available_tasks = [task for task in tasks.all() if not completed_tasks.get((Query().user_id == user_id) & (Query().task_id == task['task_id']))]
    if not available_tasks:
        return "<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!</b>", None
    page = max(0, min(page, len(available_tasks) - 1))
    task = available_tasks[page]
    text = f"""<b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>

<b>–°—Å—ã–ª–∫–∞:</b> <a href='{task['link']}'>{task['link']}</a>
<b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task['stars']} ‚≠êÔ∏è

<i>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –¥–Ω–µ–π.</i>
<i>–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'</i>"""
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"task_prev_{page}"),
        types.InlineKeyboardButton(f"{page + 1}/{len(available_tasks)}", callback_data="task_page"),
        types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"task_next_{page}")
    )
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_task_{task['task_id']}_{page}"))
    return text, markup

@bot.message_handler(commands=['start', 'admin'])
def handle_commands(message):
    user_id = message.from_user.id

    if message.text.startswith('/start'):
        if not check_subscription(user_id):
            markup = types.InlineKeyboardMarkup()
            for channel in channels.all():
                btn = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel['link'])
                markup.add(btn)
            bot.send_message(message.chat.id, "<b>üöÄ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start</b>", reply_markup=markup, parse_mode='HTML')
            return

        if not users.get(Query().user_id == user_id):
            users.insert({
                'user_id': user_id,
                'join_date': datetime.now().isoformat(),
                'refs': 0,
                'balance': 0.0,
                'withdrawn': 0.0,
                'username': message.from_user.username or "NoUsername",
                'referrer_id': None
            })

        args = message.text.split()
        if len(args) > 1:
            try:
                ref_id = int(args[1])
                if ref_id != user_id and users.get(Query().user_id == ref_id) and not users.get(Query().user_id == user_id)['referrer_id']:
                    users.update({'referrer_id': ref_id}, Query().user_id == user_id)
                    referrer = users.get(Query().user_id == ref_id)
                    users.update({'refs': referrer['refs'] + 1, 'balance': referrer['balance'] + 1.0}, Query().user_id == ref_id)
                    bot.send_message(ref_id, f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or 'NoUsername'} –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!</b>\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>1.0 ‚≠ê</b>", parse_mode='HTML')
            except ValueError:
                pass

        text = """<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!</b>

<b>–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å?</b>
1. –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ª—é–¥–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (–æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ <b>"–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"</b>)
2. –ö–æ–≥–¥–∞ —Å—É–º–º–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã–≤–æ–¥–∏—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ ‚≠ê"""
        bot.send_message(message.chat.id, text, reply_markup=main_menu(), parse_mode='HTML')

    elif message.text.startswith('/admin'):
        if user_id != config.ADMIN_ID:
            bot.send_message(message.chat.id, f"<b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n–í–∞—à ID: {user_id}\n–¢—Ä–µ–±—É–µ–º—ã–π ADMIN_ID: {config.ADMIN_ID}", parse_mode='HTML')
            return
        
        all_users = len(users.all())
        day_users = sum(1 for u in users.all() if (datetime.now() - datetime.fromisoformat(u['join_date'])).days < 1)
        
        text = f"""<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>

<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {all_users}
<b>üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è:</b> {day_users}"""
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")
        btn2 = types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_channel")
        btn3 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_promo")
        btn4 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="remove_promo")
        btn5 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")
        btn6 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="remove_task")
        markup.add(btn1, btn2)
        markup.add(btn3, btn4)
        markup.add(btn5, btn6)
        bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='HTML')

@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id
    
    if not check_subscription(user_id):
        return
    
    if message.text == "üë§ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å":
        user = users.get(Query().user_id == user_id)
        count_ref = user['refs']
        bot_username = bot.get_me().username
        text = f"""<b>üë§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>
<b>–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:</b> {count_ref}
<b>üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞:</b> <a href='https://t.me/{bot_username}?start={user_id}'>https://t.me/{bot_username}?start={user_id}</a>"""
        bot.send_message(message.chat.id, text, reply_markup=main_menu(), parse_mode='HTML')
        
    elif message.text == "üçÄ –ü—Ä–æ–º–æ–∫–æ–¥—ã":
        bot.send_message(message.chat.id, "<b>üçÄ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>", parse_mode='HTML')
        bot.register_next_step_handler(message, process_promo)
        
    elif message.text == "üè¶ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
        user = users.get(Query().user_id == user_id)
        days = (datetime.now() - datetime.fromisoformat(user['join_date'])).days
        text = f"""<b>üì± –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:</b>

<b>üë§ –ò–º—è:</b> {message.from_user.first_name} {message.from_user.last_name or ''}
<b>üîë –í–∞—à ID:</b> {user_id}
<b>üïú –î–Ω–µ–π –≤ –±–æ—Ç–µ:</b> {days}

<b>üí≥ –ë–∞–ª–∞–Ω—Å:</b>
<b>‚óè –û—Å–Ω–æ–≤–Ω–æ–π:</b> {user['balance']:.1f} ‚≠ê
<b>‚óè –í—ã–≤–µ–¥–µ–Ω–æ:</b> {user['withdrawn']:.1f} ‚≠ê"""
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")
        markup.add(btn)
        bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='HTML')
    
    elif message.text == "üìã –ó–∞–¥–∞–Ω–∏—è":
        text, markup = generate_task_message(user_id)
        bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='HTML')

def process_promo(message):
    user_id = message.from_user.id
    code = message.text.upper()
    promo = promocodes.get(Query().code == code)
    if promo:
        used_by = set(promo.get('used_by', []))
        if user_id in used_by:
            bot.send_message(message.chat.id, "<b>–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!</b>", reply_markup=main_menu(), parse_mode='HTML')
        elif promo['activations'] > 0:
            used_by.add(user_id)
            promocodes.update({'activations': promo['activations'] - 1, 'used_by': list(used_by)}, Query().code == code)
            user = users.get(Query().user_id == user_id)
            users.update({'balance': user['balance'] + promo['stars']}, Query().user_id == user_id)
            bot.send_message(message.chat.id, f"<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{promo['stars']:.1f} ‚≠ê</b>", reply_markup=main_menu(), parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π!</b>", reply_markup=main_menu(), parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "<b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!</b>", reply_markup=main_menu(), parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global request_counter
    
    if call.data == "withdraw":
        user_id = call.from_user.id
        if requests.get(Query().user_id == user_id):
            bot.edit_message_text("<b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.</b>", call.message.chat.id, call.message.message_id, parse_mode='HTML')
            return
        user = users.get(Query().user_id == user_id)
        balance = user['balance']
        text = f"<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {balance:.1f} ‚≠êÔ∏è\n\n<b>üîª –í—ã–±–µ—Ä–∏, –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:</b>"
        markup = types.InlineKeyboardMarkup()
        btns = [
            ("15 ‚≠êÔ∏è", "withdraw_15"), ("25 ‚≠êÔ∏è", "withdraw_25"),
            ("50 ‚≠êÔ∏è", "withdraw_50"), ("100 ‚≠êÔ∏è", "withdraw_100"),
            ("150 ‚≠êÔ∏è", "withdraw_150"), ("350 ‚≠êÔ∏è", "withdraw_350"),
            ("500 ‚≠êÔ∏è", "withdraw_500")
        ]
        for btn_text, btn_data in btns:
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=btn_data))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
        
    elif call.data.startswith("withdraw_"):
        stars = float(call.data.split("_")[1])
        user_id = call.from_user.id
        if requests.get(Query().user_id == user_id):
            bot.edit_message_text("<b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.</b>", call.message.chat.id, call.message.message_id, parse_mode='HTML')
            return
        user = users.get(Query().user_id == user_id)
        if user['balance'] >= stars:
            request_counter += 1
            meta.update({'request_counter': request_counter}, doc_ids=[1])
            users.update({'balance': user['balance'] - stars}, Query().user_id == user_id)
            requests.insert({'request_id': request_counter, 'user_id': user_id, 'stars': stars})
            text = f"""<b>–ó–∞—è–≤–∫–∞ ‚Ññ{request_counter} –Ω–∞ –≤—ã–≤–æ–¥ {stars:.1f} ‚≠êÔ∏è —Å–æ–∑–¥–∞–Ω–∞.</b>

<i>–í —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–≤—ë–∑–¥—ã.</i>
<i>–ù–µ –º–µ–Ω—è–π—Ç–µ username, –∏–Ω–∞—á–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</i>"""
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML')
            chat_text = f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{request_counter}</b> –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∑–∞ <b>{stars:.1f} ‚≠ê</b> –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{call.from_user.first_name} {call.from_user.last_name or ''}</b>"
            chat_msg = bot.send_message(config.CHAT_ID, chat_text, parse_mode='HTML')
            requests.update({'chat_msg_id': chat_msg.message_id}, Query().request_id == request_counter)
            channel_text = f"""<b>–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <a href="tg://user?id={user_id}">{call.from_user.first_name} {call.from_user.last_name or ''}</a>

<b>Username:</b> @{user['username']}
<b>–í—ã–±—Ä–∞–ª:</b> {stars:.1f} ‚≠ê"""
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{request_counter}"),
                types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_counter}")
            )
            channel_msg = bot.send_message(config.CHANNEL_ID, channel_text, parse_mode='HTML', reply_markup=markup)
            requests.update({'channel_msg_id': channel_msg.message_id}, Query().request_id == request_counter)
            
    elif call.data.startswith("complete_"):
        req_id = int(call.data.split("_")[1])
        req = requests.get(Query().request_id == req_id)
        if req and call.from_user.id == config.ADMIN_ID:
            stars = req['stars']
            user_id = req['user_id']
            user = users.get(Query().user_id == user_id)
            channel_text = f"""<b>–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <a href="tg://user?id={user_id}">{call.from_user.first_name} {call.from_user.last_name or ''}</a>

<b>Username:</b> @{user['username']}
<b>–í—ã–±—Ä–∞–ª:</b> {stars:.1f} ‚≠ê"""
            bot.edit_message_text(f"{channel_text}\n\n<b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</b>", config.CHANNEL_ID, req['channel_msg_id'], parse_mode='HTML')
            bot.send_message(config.CHAT_ID, f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ{req_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ <b>{stars:.1f} ‚≠ê</b>", parse_mode='HTML')
            users.update({'withdrawn': user['withdrawn'] + stars}, Query().user_id == user_id)
            requests.remove(Query().request_id == req_id)
            
    elif call.data.startswith("reject_"):
        req_id = int(call.data.split("_")[1])
        req = requests.get(Query().request_id == req_id)
        if req and call.from_user.id == config.ADMIN_ID:
            stars = req['stars']
            user = users.get(Query().user_id == req['user_id'])
            channel_text = f"""<b>–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> <a href="tg://user?id={req['user_id']}">{call.from_user.first_name} {call.from_user.last_name or ''}</a>

<b>Username:</b> @{user['username']}
<b>–í—ã–±—Ä–∞–ª:</b> {stars:.1f} ‚≠ê"""
            bot.edit_message_text(f"{channel_text}\n\n<b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>", config.CHANNEL_ID, req['channel_msg_id'], parse_mode='HTML')
            users.update({'balance': user['balance'] + stars}, Query().user_id == req['user_id'])
            requests.remove(Query().request_id == req_id)
            
    elif call.data == "add_channel" and call.from_user.id == config.ADMIN_ID:
        msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:</b>", parse_mode='HTML')
        bot.register_next_step_handler(msg, process_channel_id)
        
    elif call.data == "remove_channel" and call.from_user.id == config.ADMIN_ID:
        text = "<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
        for i, channel in enumerate(channels.all(), 1):
            text += f"{i}. <a href='{channel['link']}'>{channel['link']}</a> | {channel['id']}\n"
        text += "\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:</b>"
        msg = bot.send_message(call.message.chat.id, text, parse_mode='HTML')
        bot.register_next_step_handler(msg, process_channel_remove)
        
    elif call.data == "add_promo" and call.from_user.id == config.ADMIN_ID:
        msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:</b>", parse_mode='HTML')
        bot.register_next_step_handler(msg, process_promo_code)
        
    elif call.data == "remove_promo" and call.from_user.id == config.ADMIN_ID:
        text = "<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n"
        for i, promo in enumerate(promocodes.all(), 1):
            text += f"{i}. <b>{promo['code']}</b> | {promo['activations']} | {promo['stars']:.1f} ‚≠ê\n"
        text += "\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>"
        msg = bot.send_message(call.message.chat.id, text, parse_mode='HTML')
        bot.register_next_step_handler(msg, process_promo_remove)
    
    elif call.data == "add_task" and call.from_user.id == config.ADMIN_ID:
        msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:</b>", parse_mode='HTML')
        bot.register_next_step_handler(msg, process_task_id)
    
    elif call.data == "remove_task" and call.from_user.id == config.ADMIN_ID:
        text = "<b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:</b>\n"
        for i, task in enumerate(tasks.all(), 1):
            text += f"{i}. <a href='{task['link']}'>{task['link']}</a> | {task['id']} | {task['stars']} ‚≠êÔ∏è\n"
        text += "\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>"
        msg = bot.send_message(call.message.chat.id, text, parse_mode='HTML')
        bot.register_next_step_handler(msg, process_task_remove)
    
    elif call.data.startswith("task_prev_"):
        page = int(call.data.split("_")[2])
        new_page = max(0, page - 1)
        text, markup = generate_task_message(call.from_user.id, new_page)
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
    
    elif call.data.startswith("task_next_"):
        page = int(call.data.split("_")[2])
        available_tasks = [task for task in tasks.all() if not completed_tasks.get((Query().user_id == call.from_user.id) & (Query().task_id == task['task_id']))]
        new_page = min(len(available_tasks) - 1, page + 1)
        text, markup = generate_task_message(call.from_user.id, new_page)
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
    
    elif call.data.startswith("check_task_"):
        parts = call.data.split("_")
        task_id = int(parts[2])
        page = int(parts[3])
        user_id = call.from_user.id
        task = tasks.get(Query().task_id == task_id)
        if not task:
            bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        if completed_tasks.get((Query().user_id == user_id) & (Query().task_id == task_id)):
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!")
            return
        try:
            chat_member = bot.get_chat_member(task['id'], user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                user = users.get(Query().user_id == user_id)
                if user:
                    users.update({'balance': user['balance'] + task['stars']}, Query().user_id == user_id)
                    completed_tasks.insert({'user_id': user_id, 'task_id': task_id})
                    bot.answer_callback_query(call.id, f"–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {task['stars']} ‚≠êÔ∏è")
                    text, markup = generate_task_message(user_id, page)
                    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
                else:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            else:
                bot.answer_callback_query(call.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 400 and "chat not found" in e.description.lower():
                bot.answer_callback_query(call.id, "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            elif e.error_code == 403:
                bot.answer_callback_query(call.id, "–ë–æ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏!")
            else:
                bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e.description}")
            bot.send_message(config.ADMIN_ID, f"<b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b> –¥–ª—è task_id {task_id}, –∫–∞–Ω–∞–ª {task['id']}: {str(e)}", parse_mode='HTML')
    
    elif call.data == "back_to_menu":
        bot.edit_message_text("<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", call.message.chat.id, call.message.message_id, reply_markup=main_menu(), parse_mode='HTML')

def process_channel_id(message):
    channel_id = message.text
    msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, lambda m: process_channel_link(m, channel_id))

def process_channel_link(message, channel_id):
    channel_link = message.text
    channels.insert({'id': channel_id, 'link': channel_link})
    bot.send_message(message.chat.id, "<b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>", parse_mode='HTML')

def process_channel_remove(message):
    try:
        index = int(message.text) - 1
        if 0 <= index < len(channels.all()):
            channels.remove(doc_ids=[channels.all()[index].doc_id])
            bot.send_message(message.chat.id, "<b>–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞</b>", parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "<b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞</b>", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>", parse_mode='HTML')

def process_promo_code(message):
    code = message.text.upper()
    promocodes.insert({'code': code, 'activations': 0, 'stars': 0.0, 'used_by': []})
    msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, lambda m: process_promo_activations(m, code))

def process_promo_activations(message, code):
    try:
        activations = int(message.text)
        promocodes.update({'activations': activations}, Query().code == code)
        msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–∞—Å—Ç –∑–≤–µ–∑–¥:</b>", parse_mode='HTML')
        bot.register_next_step_handler(msg, lambda m: process_promo_stars(m, code))
    except ValueError:
        bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", parse_mode='HTML')

def process_promo_stars(message, code):
    try:
        stars = float(message.text)
        promocodes.update({'stars': stars}, Query().code == code)
        bot.send_message(message.chat.id, "<b>–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", parse_mode='HTML')

def process_promo_remove(message):
    try:
        index = int(message.text) - 1
        if 0 <= index < len(promocodes.all()):
            promocodes.remove(doc_ids=[promocodes.all()[index].doc_id])
            bot.send_message(message.chat.id, "<b>–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω!</b>", parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "<b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!</b>", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", parse_mode='HTML')

def process_task_id(message):
    task_id = message.text
    msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, lambda m: process_task_link(m, task_id))

def process_task_link(message, task_id):
    task_link = message.text
    msg = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –¥–∞–≤–∞—Ç—å—Å—è –∑–≤—ë–∑–¥:</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, lambda m: process_task_stars(m, task_id, task_link))

def process_task_stars(message, task_id, task_link):
    try:
        stars = float(message.text)
        task_count = len(tasks.all()) + 1
        tasks.insert({'task_id': task_count, 'id': task_id, 'link': task_link, 'stars': stars})
        bot.send_message(message.chat.id, "<b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", parse_mode='HTML')

def process_task_remove(message):
    try:
        index = int(message.text) - 1
        if 0 <= index < len(tasks.all()):
            tasks.remove(doc_ids=[tasks.all()[index].doc_id])
            bot.send_message(message.chat.id, "<b>–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!</b>", parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "<b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!</b>", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", parse_mode='HTML')

if __name__ == '__main__':
    bot.polling(none_stop=True)